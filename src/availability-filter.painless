// Elasticsearch _scripts key: lycan_availability_filter
if (doc['unitAvailability.dateRange.startDate'].size() == 0 || doc['unitAvailability.configuration.availability.keyword'].size() == 0) {
  return false;
}

if (params['arrivalDate'] !== null && params['departureDate'] !== null) {
  // This is the standard availability check used to filter if properties are available or not

  // This takes the params "arrivalDate" and "departureDate"

  // Get the difference in days between the arrival and departure
  LocalDate cArrival = LocalDate.parse(params.arrivalDate);
  LocalDate cDeparture = LocalDate.parse(params.departureDate);

  int nights = (int) ChronoUnit.DAYS.between(cArrival, cDeparture);

  // Get the difference in days between the arrival
  // and unitAvailability start date sequence

  LocalDate uaStart = doc['unitAvailability.dateRange.startDate'].value.toLocalDate();

  int uaDiffDays = (int) ChronoUnit.DAYS.between(uaStart, cArrival);
  if (uaDiffDays < 0) {
    return false;
  }
  String as = doc['unitAvailability.configuration.availability.keyword'].value;

  if (uaDiffDays > as.length()) {
    throw new Exception(as.length() + "");
  }

  int nightsSequence = (uaDiffDays + nights);

  String asSpliced = as.substring(uaDiffDays, nightsSequence).toString();

  return (asSpliced.indexOf('N') < 0);
} else {
  // This takes the params "startDate", "endDate" and "nights"

  // We are looking for consecutive nights within a date range, this is near identical to
  // the normal arrival/departure, except we splice out the whole range and then do a check
  // if a certain number of Y's exist in that string

  LocalDate rangeStart = LocalDate.parse(params.startDate);
  LocalDate rangeEnd = LocalDate.parse(params.endDate);

  LocalDate uaStart = doc['unitAvailability.dateRange.startDate'].value.toLocalDate();
  String as = doc['unitAvailability.configuration.availability.keyword'].value;

  int uaDiffDays = (int) ChronoUnit.DAYS.between(uaStart, rangeStart);

  if (uaDiffDays < 0) {
    return false;
  }

  if (uaDiffDays > as.length()) {
    throw new Exception(as.length() + "");
  }

  int nightsInRange = (int) ChronoUnit.DAYS.between(rangeStart, rangeEnd);

  int lengthToEnd = uaDiffDays + nightsInRange;

  String asSpliced = as.substring(uaDiffDays, lengthToEnd).toString();
  String nightsToString = '';

  for (int i = 0; i<params.nights; i++) {
     nightsToString = nightsToString + 'Y';
  }

  return (asSpliced.indexOf(nightsToString) > 0);
}
